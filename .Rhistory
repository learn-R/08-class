12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = c("Hombre", "Mujer"))) %>%
na.omit()
data <- casen %>%
select(exp = expr, #Ponderador regional
varunit, #Conglomerado de varianza
varstrat, #Estrato de varianza
region, #Región
pobreza, #Situación de pobreza por ingresos
ing_tot_hog = ytoth, #Ingreso total del hogar
sexo)
data <- data %>%
mutate_all(~as.numeric(.)) %>%
mutate(pobreza = car::recode(.$pobreza,
recodes = c("1 = 'Pobres extremos';
2 = 'Pobres no extremos';
3 = 'No pobres'"),
as.factor = T,
levels = c('Pobres extremos',
'Pobres no extremos',
'No pobres')),
region = car::recode(.$region,
recodes = c("1 = 'Tarapacá';
2 = 'Antofagasta';
3 = 'Atacama';
4 = 'Coquimbo';
5 = 'Valparaíso';
6 = 'OHiggins';
7 = 'Maule';
8 = 'Biobío';
9 = 'La Araucanía';
10 = 'Los Lagos';
11 = 'Aysén';
12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = c("Hombre", "Mujer"))) %>%
na.omit()
data$sexo <- set_label(data$sexo, 'Sexo')
saveRDS(data, "input/data/casen_proc.rds")
## Agrupando por sexo
casen_regional %>% #Con casen_regional
group_by(sexo) %>% #Agrupamos por region
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Agrupando por sexo
casen_regional %>% #Con casen_regional
group_by(sexo) %>% #Agrupamos por region
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio
?as_survey_design
?svydesign
?survey_lonely_psu
??survey_lonely_psu
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
options(survey.lonely.psu = "certainty") #Definir que los valores ajustados están definidos por estratos
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
pacman::p_load(tidyverse,
sjmisc,
srvyr,
dplyr,
tidyr)
data <- readRDS("input/data/casen_proc.rds")
head(data)
dim(data)
head(data)
library(haven)
casen <- read_dta("input/data/Casen en Pandemia 2020 STATA.dta")
find_var(casen, 'sexo')
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
View(casen_regional)
knitr::include_graphics("input/img/img_list.png")
knitr::include_graphics("input/img/img-list.png")
knitr::include_graphics("input/img/img-list.png")
library(knitr)
knitr::include_graphics("input/img/img-list.png")
![](input/img/img-list.png)
```{r list_image}
knitr::include_graphics("input/img/img-list.png")
```
![](input/img/img-list.png)
!{}(input/img/img-list.png)
![](input/img/img-list.png)
casen_regional %>% #Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
data %>% #Con data
summarise(ing_medio = mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
1191695 - 1121219
1202795 - 1110119
casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(pobreza, sexo) %>% #Agrupamos por pobreza y sexo
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(prop = prop*100)
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
?as_survey_design
pacman::p_load(tidyverse,
dplyr,
car,
haven,
sjmisc,
sjlabelled)
casen <- read_dta("input/data/Casen en Pandemia 2020 STATA.dta")
find_var(casen, 'fin')
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
nest =T, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Con Intervalos de confianza al 95% y al 99%
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
# nest =T, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Con Intervalos de confianza al 95% y al 99%
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
sum(data$exp) #Total de la población
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
fpc = 19532480, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
fpc = sum(exp), #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
rm(casen_regional)
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
fpc = sum(exp), #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
options("survey.lonely.psu" = "certainty")
data <- data %>%
group_by(varstrat) %>%
summarise(stran = sum(exp))
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
data <- readRDS("input/data/casen_proc.rds")
data <- data %>%
group_by(varstrat) %>%
summarise(stratn = sum(exp))
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
fpc = stratn, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
data <- readRDS("input/data/casen_proc.rds")
data <- data %>%
group_by(varstrat) %>%
mutate(stratn = sum(exp))
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
fpc = stratn, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
View(data)
## Con Intervalos de confianza al 95% y al 99%
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,
#fpc = stratn, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Con Intervalos de confianza al 95% y al 99%
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
data <- readRDS("input/data/casen_proc.rds")
data <- readRDS(gzcon(url("https://github.com/learn-R/07-class/blob/main/input/data/casen_proc.rds")))
data <- readRDS(gzcon(url("https://github.com/learn-R/07-class/blob/main/input/data/casen_proc.rds")))
data <- readRDS(gzcon(url("https://github.com/learn-R/07-class/blob/main/input/data/casen_proc.rds")))
data <- readRDS(gzcon(url("https://github.com/learn-R/07-class/blob/main/input/data/casen_proc.rds?raw=true")))
knitr::include_graphics(url("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true"))
![](https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true)
```{r list_image}
knitr::include_graphics(url("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true"))
```
install.packages("knitr")
install.packages("knitr")
library(knitr)
knitr::include_graphics(url("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true"))
knitr::include_graphics("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true")
![](https://github.com/learn-R/07-class/blob/main/input/img/img-list.png)
![](https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true)
![](https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true)
knitr::include_graphics("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true")
knitr::include_graphics("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png?raw=true")
knitr::include_graphics("https://github.com/learn-R/07-class/blob/main/input/img/img-list.png")
![](https://github.com/learn-R/07-class/raw/main/input/img/img-list.png)
View(data)
pacman::p_load(tidyverse,
sjmisc,
srvyr,
dplyr,
tidyr)
data <- readRDS(gzcon(url("https://github.com/learn-R/07-class/blob/main/input/data/casen_proc.rds?raw=true")))
data <- data %>%
group_by(varstrat) %>% #Agrupando por varstrat
mutate(stratn = sum(exp)) #Calculamos el total de personas por estrato
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat,#los estratos a partir de varstrat,
fpc = stratn, #especificando que la estimación es con una población finita
weights = exp) #y los ponderadores con exp
casen_regional %>% #Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
descr(data$ing_tot_hog)
1574919/sqrt(nrow(data))
1574919/sqrt(185339))
1574919/185339
nrow(data)
1574919/sqrt(185339)
datos_proc <- readRDS("input/data/datos_proc.rds")
plot_grpfrq(datos_proc$sexo, datos_proc$ocupacion,
type = "bar", title = "Gráfico de barras")
pacman::p_load(sjmisc,
sjPlot,
tidyverse,
magrittr)
plot_grpfrq(datos_proc$sexo, datos_proc$ocupacion,
type = "bar", title = "Gráfico de barras")
names(datos_proc)
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ocupacion, title = "Gráfico de barras")
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ocupacion, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
names(datos_proc)
datos_proc %>% select("sexo","ife", "ife_d") %>%
plot_stackfrq(., title = "Gráfico de barras proporcional")
?plot_stackfrq
pacman::p_load(sjmisc,
sjPlot,
tidyverse,
magrittr)
datos_proc <- readRDS("input/data/datos_proc.rds")
#Con dos variables
datos_proc %>%  filter(ingreso_percapita <= 2000000) %>%
plot_scatter(., horas_mens, ingreso_percapita)
#Con dos variables
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., horas_mens, ing_pc)
#Con dos variables
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., tot_per, ing_pc)
#Con tercera variable categórica
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., tot_per, ing_pc, sexo)
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., tot_per, ing_pc, sexo,
fit.grps = "lm", grid = TRUE)
#Grafico de barras
plot_grpfrq(datos_proc$sexo, datos_proc$ocupacion,
type = "bar", title = "Gráfico de barras")
#Barras con porcentaje y barra de totales
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ocupacion, title = "Gráfico de barras")
#Barras horizontales
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ocupacion, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ocupacion, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
names(datos_proc)
#Barras horizontales
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ife, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$ife, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
frq(datos_proc)
names(datos_proc)
#Barras horizontales
plot_xtab(datos_proc$ocupacion, datos_proc$ife, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$ocupacion, datos_proc$ife, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$ocupacion, datos_proc$sexo_edad_tramo, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
coord.flip = TRUE)
frq(datos_proc$ocupacion)
frq(datos_proc$o2)
frq(datos_proc$o3)
frq(datos_proc$o4)
#Barras horizontales
plot_xtab(datos_proc$o4, datos_proc$ife, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$o4, datos_proc$sexo_tramo_edad, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
#Barras horizontales
plot_xtab(datos_proc$o4, datos_proc$sexo_edad_tramo, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
datos_proc %>% select(ocupacion, o2, o3, o4, o6) %>%
plot_stackfrq(., title = "Gráfico de barras proporcional")
#Escalas Likert
datos_proc %>% select("ocupacion","o2", "o3", "o4", "o6") %>%
sjPlot::plot_likert(., title = "Gráfico de escalas Likert")
#Proporciones cruzadas
plot_gpt(datos_proc, ife, ocupacion, sexo,
shapes = c(15, 21),
title = "Gráfico de proporción agrupada")
#Proporciones cruzadas
plot_gpt(datos_proc, ife, o4, sexo,
shapes = c(15, 21),
title = "Gráfico de proporción agrupada")
names(datos_proc)
#Proporciones cruzadas
plot_gpt(datos_proc, o4, sexo_edad_tramo,
shapes = c(15, 21),
title = "Gráfico de proporción agrupada")
#Escalas Likert
datos_proc %>% select("ocupacion","o2", "o3", "o4", "o6") %>%
sjPlot::plot_likert(., title = "Gráfico de escalas Likert")
#Proporciones cruzadas
plot_gpt(datos_proc, o4, o6, sexo_edad_tramo,
shapes = c(15, 21),
title = "Gráfico de proporción agrupada")
#Proporciones cruzadas
plot_gpt(datos_proc, o4, o6, sexo,
shapes = c(15, 21),
title = "Gráfico de proporción agrupada")
#Gráfico de puntos
plot_grpfrq(datos_proc$sexo, datos_proc$ocupacion,
title = "Gráfico de puntos",
type = "dot")
#Gráfico de puntos
plot_grpfrq(datos_proc$sexo, datos_proc$o4,
title = "Gráfico de puntos",
type = "dot")
plot_grpfrq(datos_proc$sexo_edad_tramo, datos_proc$ife,
title = "Gráfico de línea",
type = "line")
plot_grpfrq(datos_proc$sexo_edad_tramo, datos_proc$o4,
title = "Gráfico de línea",
type = "line")
plot_grpfrq(datos_proc$sexo_edad_tramo, datos_proc$ocupacion,
title = "Gráfico de línea",
type = "line")
#Gráfico de cajas
plot_grpfrq(datos_proc$tot_per, datos_proc$sexo_edad_tramo,
title = "Gráfico de caja",
type = "boxplot")
#Incorporar tercera variable
plot_grpfrq(datos_proc$tot_per, datos_proc$sexo_edad_tramo, intr.var = datos_proc$o4,
title = "Gráfico de cajas",
type = "box")
#Gráfico de violín
plot_grpfrq(datos_proc$tot_per, datos_proc$sexo_edad_tramo,
title = "Gráfico de violín",
type = "violin")
sjt.xtab(datos_proc$sexo, datos_proc$o4,
title = "Tabla de contingencias",
show.col.prc=TRUE,
show.summary=FALSE)
sjt.xtab(datos_proc$sexo, datos_proc$o4,
title = "Tabla de contingencias",
show.col.prc=TRUE,
show.summary=FALSE, encoding = "UTF-8")
tab_stackfrq(as.data.frame(datos_proc %>% select("o3", "o4", "o6")),
value.labels=c('1'='Si', '2'='No'),
encoding = "UTF-8",
show.n = TRUE, show.total = T)
tab_stackfrq(as.data.frame(datos_proc %>% select(sexo, "o4", "o6")),
value.labels=c('1'='Si', '2'='No'),
encoding = "UTF-8",
show.n = TRUE, show.total = T)
data.frame(as_factor(sample(datos_proc$ocupacion, replace = TRUE)),
as_factor(sample(datos_proc$o2, replace = TRUE)),
as_factor(sample(datos_proc$o3, replace = TRUE)),
as_factor(sample(datos_proc$o4, replace = TRUE)),
as_factor(sample(datos_proc$o6, replace = TRUE))) %>%
sjp.chi2(.,
title = "Gráfico de Chi2",
axis.labels  = c("Trabajó al menos una hora", "realizó alguna actividad", "Tenía algún empleo", "Ha trabajado alguna vez", "Busco empleo"))
data.frame(as_factor(sample(datos_proc$sexo, replace = TRUE)),
as_factor(sample(datos_proc$o4, replace = TRUE)),
as_factor(sample(datos_proc$o6, replace = TRUE))) %>%
sjp.chi2(.,
title = "Gráfico de Chi2",
axis.labels  = c("Ha trabajado alguna vez", "Busco empleo"))
datos_proc %>%
select(ing_pc, tot_per) %>%
tab_corr(.,
triangle = "lower",
title = "Tabla de correlación",
encoding = "UTF-8")
sjp.aov1(datos_proc$ing_pc, datos_proc$sexo, title = "Anova")
datos_proc <- readRDS("input/data/datos_proc.rds")
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., tot_per, ing_pc, sexo)
datos_proc %>%  filter(ing_pc <= 2000000) %>%
plot_scatter(., tot_per, ing_pc, sexo,
fit.grps = "lm", grid = TRUE)
#Grafico de barras
plot_grpfrq(datos_proc$sexo, datos_proc$o4,
type = "bar", title = "Gráfico de barras")
plot_xtab(datos_proc$sexo_edad_tramo, datos_proc$o4, title = "Gráfico de barras")
plot_xtab(datos_proc$o4, datos_proc$sexo_edad_tramo, margin = "row",
bar.pos = "stack",
title = "Gráfico de barras horizontales",
show.summary = TRUE, coord.flip = TRUE)
