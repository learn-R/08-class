## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(prop = survey_mean(pobreza, na.rm = T)) #Y calculamos las proprciones
## Transformando a porcentaje
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T))%>% #Calculamos las proporciones
mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
## Incorporamos cálculo de frecuencias
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T), #Calculamos las proporciones
total = survey_total(na.rm=T))%>% #Y el total por categorías
mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
## Incorporamos cálculo de frecuencias
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T), #Calculamos las proporciones
total = survey_count(na.rm=T))%>% #Y el total por categorías
mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
## Incorporamos cálculo de frecuencias
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T), #Calculamos las proporciones
total = survey_total(na.rm=T))%>% #Y el total por categorías
mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
## Con Intervalos de confianza al 95%
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T)) #Incorporamos intervalos de confianza
## Transformamos el estimador puntual y los límites del intervalo a porcentajes
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T)) %>% #Incorporamos intervalos de confianza
mutate(prop = prop*100, #Multiplicamos las proporciones *100,
prop_low = prop_low*100, #así como el límite inferior
prop_upp = prop_upp*100) #y superior, para obtener porcentajes
## Incorporamos el total
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(prop = prop*100, #Multiplicamos las proporciones *100,
prop_low = prop_low*100, #así como el límite inferior
prop_upp = prop_upp*100) #y superior, para obtener porcentajes
## Crear objeto wide
pobreza_reg <- casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(region, pobreza) %>% #Agrupamos por region y pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(per = prop*100) %>% #Multiplicamos las proporciones *100 para obtener porcentajes
select(region, pobreza, per, total) %>% #Seleccionamos region, pobreza, per y total
pivot_wider(names_from = "pobreza", #Pivoteamos a lo ancho, extrayendo los nombres de las columnas desde pobreza
values_from = c("per", "total")) #y los valores desde per y total
?survey_mean
pobreza_reg <- casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(region, pobreza) %>% #Agrupamos por region y pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(per = prop*100)
View(pobreza_reg)
## Crear objeto wide
pobreza_reg <- casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(region, pobreza) %>% #Agrupamos por region y pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(per = prop*100) %>% #Multiplicamos las proporciones *100 para obtener porcentajes
select(region, pobreza, per, total) %>% #Seleccionamos region, pobreza, per y total
pivot_wider(names_from = "pobreza", #Pivoteamos a lo ancho, extrayendo los nombres de las columnas desde pobreza
values_from = c("per", "total")) #y los valores desde per y total
View(pobreza_reg)
library(sjPlot)
sjPlot::view_df(pobreza_reg
)
## Con Intervalos de confianza al 95%
casen_regional %>%#Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Calculamos el
## Con Intervalos de confianza al 95%
casen_regional %>%#Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T),
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T))
casen_regional <- data %>%
svydesign(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
casen_regional <- data %>%
svydesign(strata = ~ varstrat, #los estratos a partir de varstrat,
id = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
weights = ~ exp) #y los ponderadores con exp
?svydesign
casen_regional <- data %>%
svydesign(strata = ~ varstrat, #los estratos a partir de varstrat,
ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
weights = ~ exp) #y los ponderadores con exp
casen_regional <- data %>%
svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp) #y los ponderadores con exp
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, data) #y los ponderadores con exp
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
survey, #Para crear objeto encuesta
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, data) #y los ponderadores con exp
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
survey, #Para crear objeto encuesta
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, data) #y los ponderadores con exp
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, data = data) #y los ponderadores con exp
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
survey, #Para crear objeto encuesta
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
options(survey.lonely.psu = "certainty") #Definir que los valores ajustados están definidos por estratos
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
View(casen_regional)
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
survey, #Para crear objeto encuesta
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, #y los ponderadores con exp
data = data)
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Comparemos
data %>% #Con casen_regional
summarise(ing_medio = mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Con Intervalos de confianza al 95%
casen_regional %>%#Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Crear objeto wide
pobreza_reg <- casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(region, pobreza) %>% #Agrupamos por region y pobreza
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(per = prop*100) %>% #Multiplicamos las proporciones *100 para obtener porcentajes
select(region, pobreza, per, total) %>% #Seleccionamos region, pobreza, per y total
pivot_wider(names_from = "pobreza", #Pivoteamos a lo ancho, extrayendo los nombres de las columnas desde pobreza
values_from = c("per", "total")) #y los valores desde per y total
library(sjPlot)
?tab_df
sjPlot::tab_df(pobreza_reg
)
?tab_df
rm(casen_regional)
casen_regional <- svydesign(ids = ~ varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = ~ varstrat, #los estratos a partir de varstrat,
weights = ~ exp, #y los ponderadores con exp
data = data)
View(casen_regional)
View(casen_regional)
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
library(srvyr)
## Cálculo simple
casen_regional %>% #Con casen_regional
summarise(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Con Intervalos de confianza al 95%
casen_regional %>%#Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el
## Con Intervalos de confianza al 95%
casen_regional %>%#Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
## Agrupando por sexo
casen_regional %>% #Con casen_regional
group_by(sexo) %>% #Agrupamos por region
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio
## Cálculo simple
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T)) #Y calculamos las proprciones
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
casen <- read_dta("input/data/Casen en Pandemia 2020 STATA.dta")
pacman::p_load(tidyverse,
dplyr,
car,
haven,
sjmisc,
sjlabelled)
casen <- read_dta("input/data/Casen en Pandemia 2020 STATA.dta")
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
## Cálculo simple
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_prop(na.rm = T)) #Y calculamos las proprciones
## Con survey_mean
casen_regional %>% #Con casen_regional
group_by(pobreza) %>% #Agrupamos por pobreza
summarise(prop = survey_mean(na.rm = T)) #Y calculamos las proprciones
frq(casen$sexo)
data <- data %>%
mutate_all(~as.numeric(.)) %>%
mutate(pobreza = car::recode(.$pobreza,
recodes = c("1 = 'Pobres extremos';
2 = 'Pobres no extremos';
3 = 'No pobres'"),
as.factor = T,
levels = c('Pobres extremos',
'Pobres no extremos',
'No pobres')),
region = car::recode(.$region,
recodes = c("1 = 'Tarapacá';
2 = 'Antofagasta';
3 = 'Atacama';
4 = 'Coquimbo';
5 = 'Valparaíso';
6 = 'OHiggins';
7 = 'Maule';
8 = 'Biobío';
9 = 'La Araucanía';
10 = 'Los Lagos';
11 = 'Aysén';
12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = ("Hombre", "Mujer"))) %>%
na.omit()
?survey_mean
data <- data %>%
mutate_all(~as.numeric(.)) %>%
mutate(pobreza = car::recode(.$pobreza,
recodes = c("1 = 'Pobres extremos';
2 = 'Pobres no extremos';
3 = 'No pobres'"),
as.factor = T,
levels = c('Pobres extremos',
'Pobres no extremos',
'No pobres')),
region = car::recode(.$region,
recodes = c("1 = 'Tarapacá';
2 = 'Antofagasta';
3 = 'Atacama';
4 = 'Coquimbo';
5 = 'Valparaíso';
6 = 'OHiggins';
7 = 'Maule';
8 = 'Biobío';
9 = 'La Araucanía';
10 = 'Los Lagos';
11 = 'Aysén';
12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = c("Hombre", "Mujer"))) %>%
na.omit()
data <- data %>%
mutate_all(~as.numeric(.)) %>%
mutate(pobreza = car::recode(.$pobreza,
recodes = c("1 = 'Pobres extremos';
2 = 'Pobres no extremos';
3 = 'No pobres'"),
as.factor = T,
levels = c('Pobres extremos',
'Pobres no extremos',
'No pobres')),
region = car::recode(.$region,
recodes = c("1 = 'Tarapacá';
2 = 'Antofagasta';
3 = 'Atacama';
4 = 'Coquimbo';
5 = 'Valparaíso';
6 = 'OHiggins';
7 = 'Maule';
8 = 'Biobío';
9 = 'La Araucanía';
10 = 'Los Lagos';
11 = 'Aysén';
12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = c("Hombre", "Mujer"))) %>%
na.omit()
data <- casen %>%
select(exp = expr, #Ponderador regional
varunit, #Conglomerado de varianza
varstrat, #Estrato de varianza
region, #Región
pobreza, #Situación de pobreza por ingresos
ing_tot_hog = ytoth, #Ingreso total del hogar
sexo)
data <- data %>%
mutate_all(~as.numeric(.)) %>%
mutate(pobreza = car::recode(.$pobreza,
recodes = c("1 = 'Pobres extremos';
2 = 'Pobres no extremos';
3 = 'No pobres'"),
as.factor = T,
levels = c('Pobres extremos',
'Pobres no extremos',
'No pobres')),
region = car::recode(.$region,
recodes = c("1 = 'Tarapacá';
2 = 'Antofagasta';
3 = 'Atacama';
4 = 'Coquimbo';
5 = 'Valparaíso';
6 = 'OHiggins';
7 = 'Maule';
8 = 'Biobío';
9 = 'La Araucanía';
10 = 'Los Lagos';
11 = 'Aysén';
12 = 'Magallanes';
13 = 'Metropolitana';
14 = 'Los Ríos';
15 = 'Arica y Parinacota';
16 = 'Ñuble'"),
as.factor = T,
levels = c('Tarapacá',
'Antofagasta',
'Atacama',
'Coquimbo',
'Valparaíso',
'OHiggins',
'Maule',
'Biobío',
'La Araucanía',
'Los Lagos',
'Aysén',
'Magallanes',
'Metropolitana',
'Los Ríos',
'Arica y Parinacota',
'Ñuble')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"),
as.factor = T, levels = c("Hombre", "Mujer"))) %>%
na.omit()
data$sexo <- set_label(data$sexo, 'Sexo')
saveRDS(data, "input/data/casen_proc.rds")
## Agrupando por sexo
casen_regional %>% #Con casen_regional
group_by(sexo) %>% #Agrupamos por region
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Agrupando por sexo
casen_regional %>% #Con casen_regional
group_by(sexo) %>% #Agrupamos por region
summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio
?as_survey_design
?svydesign
?survey_lonely_psu
??survey_lonely_psu
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
srvyr, #Para trabajar con muestras complejas
dplyr, #Para manipular datos
tidyr) #Para transformar la estructura de los datos
data <- readRDS("input/data/casen_proc.rds")
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
options(survey.lonely.psu = "certainty") #Definir que los valores ajustados están definidos por estratos
## Cálculo simple
casen_regional %>% #Con casen_regional
summarize(ing_medio = srvyr::survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
pacman::p_load(tidyverse,
sjmisc,
srvyr,
dplyr,
tidyr)
data <- readRDS("input/data/casen_proc.rds")
head(data)
dim(data)
head(data)
library(haven)
casen <- read_dta("input/data/Casen en Pandemia 2020 STATA.dta")
find_var(casen, 'sexo')
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
strata = varstrat, #los estratos a partir de varstrat,
weights = exp) #y los ponderadores con exp
View(casen_regional)
knitr::include_graphics("input/img/img_list.png")
knitr::include_graphics("input/img/img-list.png")
knitr::include_graphics("input/img/img-list.png")
library(knitr)
knitr::include_graphics("input/img/img-list.png")
![](input/img/img-list.png)
```{r list_image}
knitr::include_graphics("input/img/img-list.png")
```
![](input/img/img-list.png)
!{}(input/img/img-list.png)
![](input/img/img-list.png)
casen_regional %>% #Con casen_regional
summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
data %>% #Con data
summarise(ing_medio = mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
casen_regional %>% #Con casen_regional
summarise(ing_medio95 = survey_mean(ing_tot_hog, vartype = "ci", level = .95, na.rm=T), #Al 95%
ing_medio99 = survey_mean(ing_tot_hog, vartype = "ci", level = .99, na.rm=T)) #Al 99%
1191695 - 1121219
1202795 - 1110119
casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
group_by(pobreza, sexo) %>% #Agrupamos por pobreza y sexo
summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
mutate(prop = prop*100)
