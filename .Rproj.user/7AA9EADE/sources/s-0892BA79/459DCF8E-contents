---
title: "Muestras complejas y precisión de inferencia estadística"
linktitle: "7: Muestras complejas y precisión de inferencia estadística"
date: "2021-09-16"
menu:
  example:
    parent: Ejemplos
    weight: 7
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## 0. Objetivo del práctico

Este práctico tiene por objetivo introducir el trabajo estadístico con **muestras complejas en R**, así como en la precisión de inferencia estadística. 

## 1. Recursos del práctico

El presente práctico será realizado con datos de la *Encuesta de Caracterización Socioeconómica (CASEN)* en su versión 2020. Estos datos ya han sido previamente procesados para su correcta realización, recodificando casos perdidos, y renombrando y seleccionando variables. 

Recuerden siempre consultar el [**manual/libro de códigos**](http://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2020/Libro_de_codigos_Base_de_Datos_Casen_en_Pandemia_2020.pdf) antes de trabajar una base de datos.

## 2. Librerías a utilizar

Utilizaremos las siguientes librerías:

1. `pacman`: para facilitar y agilizar la lectura de los paquetes a utilizar en R

2. `sjmisc`: para explorar datos

3. `srvyr`:

4. `survey`:

5. `dplyr`: para manipular datos

# Pasos del procesamiento

## 1. Cargar librerías

```{r packages}
pacman::p_load(sjmisc,
               srvyr,
               survey,
               dplyr)
```


## 2. Cargar datos

Como se señaló anteriormente, trabajaremos con datos de CASEN 2020, ya procesados con anterioridad

```{r readRDS}
data <- readRDS("input/data/casen_proc.rds")
```

Como podemos ver, estos datos tienen 147.239 filas (observaciones), así como 8 columnas. Inspeccionemos: 

```{r head1}
head(data)
```

Tenemos tanto variables numéricas (exp, id, ing_tot_hog y tot_per) como factores (region, pobreza, prev_salud y prev_pens). ¡Explorémoslas!

## 3. Explorar datos

Con `frq()` de `sjmisc`, exploraremos las categorías de las variables factor:

```{r frq1}
frq(data$region)
frq(data$pobreza)
frq(data$prev_salud)
frq(data$prev_pens)
```

Como podemos ver, *region* provee información sobre la región a la que pertenecen los hogares; *pobreza* nos provee información respecto de la situación de pobreza por ingresos (o no) de los hogares; *prev_salud* nos informa respecto del sistema previsional de salud al cual pertenece el/la respondente; y *prev_pens* indica si quien responde está afiliado/a (o no) a algún sistema previsional. 

Ahora vamos con `descr()` de `sjmisc` para las variables numéricas

```{r descr1}
descr(data$exp)
descr(data$varstrat)
descr(data$varunit)
descr(data$ing_tot_hog)
descr(data$tot_per)
```

*ing_tot_hog* presenta información respecto de los ingresos totales de los hogares; *tot_per* indica el total de personas que habitan cada vivienda; *exp* es un ponderador regional; *varstrat* provee información sobre el estrato de varianza; y *varunit* sobre el conglomerado de varianza. Estas últimas tres variables serán **sumamente relevantes** para este práctico. 

## 4. Cálculo con muestras complejas

Una vez explorados nuestros datos, es hora de empezar a realizar nuestros cálculos con muestras complejas. Para ello, lo primero es crear un objeto encuesta de modo que, posteriormente, podamos calcular promedios con nuestras variables cuantitativas, y proporciones para nuestras variables categóricas. 

### a) Creación de objeto encuesta (survey)

Como ya se señaló, lo primero es crear un **objeto encuesta (survey)**. Este corresponde a una lista (_List_) que nos permitirá realizar los cálculos que deseemos, considerando las varables de diseño (en este caso, varunit, varstrat y exp). Para ello, utilizaremos la función `svydesign()` de la librería `survey`

```{r survey}
casen_enc <- svydesign( #Creamos un nuevo objeto llamado casen_enc
  ids =  ~ varunit, #Especificamos los conglomerados de varianza (id) como la variable varunit
  strata =  ~ varstrat, #Especificamos los estratos de varianza (strata) como la variable varstrat
  weights =  ~ exp, #Especificamos los ponderadores (weights) como la variable exp
  data = data) #Especificamos que estamos trabajando con los datos de data
```

Fijándonos en nuestro entorno, nos daremos cuenta de que se creó una lista con 9 elementos llamada **casen_enc**. Si bien la información que nos entrega por sí sólo nos resulta algo críptica, este objeto nos permitirá realizar cálculos aplicando las variables de diseño muestral complejo.

### b) Cálculo de promedios para variables numéricas



```{r mean_num}
svymean( ~ ing_tot_hog, casen_enc, na.rm = TRUE) #Cálculo de media y error estándar

```

```{r ci_num}
confint(svymean( ~ ing_tot_hog, casen_enc, na.rm = TRUE)) # Cálculo de intervalo de confianza (95%)
```

```{r perc_num}
svyquantile(~ ing_tot_hog, casen_enc, na = TRUE, c(.25,.5,.75),ci=TRUE)
```

```{r ing_by_pobreza}
svyby( ~ ing_tot_hog, ~ pobreza, casen_enc, svymean, na.rm = TRUE)
```

```{r subset}
casen_metrop <- subset(casen_enc, tot_per<=5 & region == 'Metropolitana')
svyby(  ~ ing_tot_hog, ~ prev_salud, casen_metrop, svymean, na.rm = TRUE)
```

```{r hist}
svyhist(~tot_per, casen_enc)
```


### c) Cálculo de proporciones para variables categóricas

```{r prop_factor}
svymean( ~ pobreza, casen_enc, na.rm = TRUE)
```

```{r prop_ci_factor}
svyciprop( ~I(prev_salud == "FONASA"), casen_enc)
svyciprop( ~I(prev_salud == "ISAPRE"), casen_enc)
svyciprop( ~I(prev_salud == "Otro"), casen_enc)
```

```{r pobreza_by_pens}
svyby (~pobreza, ~ prev_pens, casen_enc, na.rm = T, svymean)
```

```{r barplot}
barras <-svyby(~prev_pens, ~pobreza, casen_enc, na = TRUE, svymean)
barplot(barras,beside=TRUE,legend=TRUE)
```


## 5. Creación de dataframe


