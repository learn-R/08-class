---
title: "Muestras complejas y precisión de inferencia estadística"
linktitle: "7: Muestras complejas y precisión de inferencia estadística"
date: "2021-09-16"
menu:
  example:
    parent: Ejemplos
    weight: 7
type: docs
toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## 0. Objetivo del práctico

Este práctico tiene por objetivo introducir el trabajo estadístico con **muestras complejas en R**, es decir, cuando se trabaja con muestras que busquen ser representativas de la población a estudiar, bajo determinados parámetros. Buscaremos calcular estimadores puntuales e intervalos de confianza, que nos permite reportar el error asociado a la inferencia. 

## 1. Recursos del práctico

El presente práctico será realizado con datos de la *Encuesta de Caracterización Socioeconómica (CASEN)* en su versión 2020. Estos datos ya han sido previamente procesados para su correcta realización, recodificando casos perdidos, y renombrando y seleccionando variables. 

Recuerden siempre consultar el [**manual/libro de códigos**](http://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2020/Libro_de_codigos_Base_de_Datos_Casen_en_Pandemia_2020.pdf) antes de trabajar una base de datos.

## 2. Librerías a utilizar

Utilizaremos las siguientes librerías:

1. `pacman`: para facilitar y agilizar la lectura de los paquetes a utilizar en R

2. `sjmisc`: para explorar datos

3. `srvyr`: para trabajar con objetos encuesta, y realizar cálculos en diálogo con `dplyr`

4. `dplyr`: para manipular datos

# Pasos del procesamiento

## 1. Cargar librerías

```{r packages}
pacman::p_load(tidyverse,
               sjmisc,
               srvyr,
               dplyr,
               tidyr)
options(survey.lonely.psu = "certainty") #Definir que los valores ajustados están definidos por estratos
```


## 2. Cargar datos

Como se señaló anteriormente, trabajaremos con datos de CASEN 2020, ya procesados con anterioridad

```{r readRDS}
data <- readRDS("input/data/casen_proc.rds")
```

Como podemos ver, estos datos tienen 147.239 filas (observaciones), así como 8 columnas. Inspeccionemos: 

```{r head1}
head(data)
```

Tenemos tanto variables numéricas (exp, id, ing_tot_hog y tot_per) como factores (region, pobreza, prev_salud y prev_pens). ¡Explorémoslas!

## 3. Explorar datos

Con `frq()` de `sjmisc`, exploraremos las categorías de las variables factor:

```{r frq1}
frq(data$region)
frq(data$pobreza)
```

Como podemos ver, *region* provee información sobre la región a la que pertenecen los hogares; y *pobreza* nos provee información respecto de la situación de pobreza por ingresos (o no) de los hogares. 

Ahora vamos con `descr()` de `sjmisc` para las variables numéricas

```{r descr1}
descr(data$exp)
descr(data$varstrat)
descr(data$varunit)
descr(data$ing_tot_hog)
```

*ing_tot_hog* presenta información respecto de los ingresos totales de los hogares; *varstrat* provee información sobre el estrato de varianza; y *varunit* sobre el conglomerado de varianza, es decir, la unidad mínima de observación que, en este caso, son los hogares. Estas últimas tres variables serán **sumamente relevantes** para este práctico. 

## 4. Cálculo con muestras complejas

Una vez explorados nuestros datos, es hora de empezar a realizar nuestros cálculos con muestras complejas. Para ello, lo primero es crear un objeto encuesta de modo que, posteriormente, podamos calcular promedios con nuestras variables cuantitativas, y proporciones para nuestras variables categóricas. 

### a) Creación de objeto encuesta (srvyr)

Como ya se señaló, lo primero es crear un **objeto encuesta (survey)**. Este corresponde a una lista (*List*) que nos permitirá realizar los cálculos que deseemos, considerando las varables de diseño (en este caso, varunit, varstrat y exp). Para ello, utilizaremos la función `as_survey_design()` de la librería `srvyr`

```{r srvyr}
casen_regional <- data %>% #Creamos un nuevo objeto llamado casen_regional con la información de data
  as_survey_design(ids = varunit, #Aplicamos diseño muestral, especificando los ids a partir de varunit,
                   strata = varstrat, #los estratos a partir de varstrat,
                   weights = exp) #y los ponderadores con exp
```

Fijándonos en nuestro entorno, nos daremos cuenta de que se creó una lista con 9 elementos llamada **casen_regional**. Si bien la información que nos entrega por sí sólo nos resulta algo críptica, este objeto nos permitirá realizar cálculos aplicando las variables de diseño muestral complejo. Algo interesante de los objetos encuesta creados con `srvyr`, es que podemos interactuar con las funciones de `dplyr`, como `group_by()` o `summarise()`. 

### b) Cálculo de medias para variables numéricas

Ya una vez que tenemos creado nuestro objeto encuesta, podemos realizar diversos tipos de cálculos. Calculemos, por ejemplo, la media de ingresos a nivel poblacional, con la función `survey_mean()` de `srvyr`

```{r mean_num}
casen_regional %>% #Con casen_regional
  summarise(ing_medio = survey_mean(ing_tot_hog, na.rm=T)) #Calculamos el ingreso medio poblacional
```

También es posible, por ejemplo, incorporar intervalos de confianza:

```{r mean_num_ci}
casen_regional %>%#Con casen_regional
  summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio poblacional, y sus intervalos de confianza
```

Asimismo, es posible calcular la media de ingresos agrupando por región

```{r mean_num_byregion}
casen_regional %>% #Con casen_regional
  group_by(region) %>% #Agrupamos por region
  summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) #Calculamos el ingreso medio poblacional, y sus intervalos de confianza
```

¿Y si quisiéramos crear una tabla con una columna por región, cuyas observaciones nos indiquen la media de ingreso para cada una de ellas? ¡Simplemente acudimos a `pivot_wider()` de `tidyr`!

```{r wide_num}
ing_region <- casen_regional %>% 
  group_by(region) %>% #Agrupamos por region
  summarise(ing_medio = survey_mean(ing_tot_hog, vartype = "ci", na.rm=T)) %>% #Calculamos el ingreso medio poblacional, y sus intervalos de confianza
  select(region, ing_medio) %>% #Seleccionamos region e ing_medio
  pivot_wider(names_from = "region", #Pivoteamos, extrayendo los nombres de las columnas desde region
              values_from = "ing_medio") #Y los valores desde ing_medio
head(ing_region) #Visualizamos
```


### c) Cálculo de proporciones para variables categóricas

```{r prop_factor}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(na.rm = T)) #Y calculamos las proporciones
```

```{r per_factor}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(na.rm = T))%>% #Calculamos las proporciones
  mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
```

```{r per_tot_factor}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(na.rm = T), #Calculamos las proporciones
            total = survey_total(na.rm=T))%>% #Y el total por categorías
  mutate(per = prop*100) #Creamos una nueva columna multiplicando las proporciones *100 para obtener porcentajes
```

```{r prop_factor_ci}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(vartype = "ci", na.rm = T)) #Incorporamos intervalos de confianza
```

```{r per_factor_ci}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(vartype = "ci", na.rm = T)) %>% #Incorporamos intervalos de confianza
  mutate(prop = prop*100, #Multiplicamos las proporciones *100,
         prop_low = prop_low*100, #así como el límite inferior 
         prop_upp = prop_upp*100) #y superior, para obtener porcentajes
```

```{r per_tot_factor_ci}
casen_regional %>% #Con casen_regional
  group_by(pobreza) %>% #Agrupamos por pobreza
  summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
            total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
  mutate(prop = prop*100, #Multiplicamos las proporciones *100,
         prop_low = prop_low*100, #así como el límite inferior 
         prop_upp = prop_upp*100) #y superior, para obtener porcentajes
```


```{r wide_factor}
pobreza_reg <- casen_regional %>% #Creamos un objeto llamado pobreza_reg con datos de casen_regional
  group_by(region, pobreza) %>% #Agrupamos por region y pobreza
  summarise(prop = survey_prop(vartype = "ci", na.rm = T), #Calculamos las proporciones con intervalos de confianza
            total = survey_total(vartype = "ci", na.rm=T)) %>% #Así como el total por categoría
  mutate(per = prop*100) %>% #Multiplicamos las proporciones *100 para obtener porcentajes
  select(region, pobreza, per, total) %>% #Seleccionamos region, pobreza, per y total
  pivot_wider(names_from = "pobreza", #Pivoteamos a lo ancho, extrayendo los nombres de las columnas desde pobreza
              values_from = c("per", "total")) #y los valores desde per y total
```


